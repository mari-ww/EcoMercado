  spring.application.name=gateway
  spring:
    main:
      web-application-type: reactive
    cloud:
      gateway:
        routes:
          - id: user-service
            uri: http://user-service-1:5000
            predicates:
              - Path=/users/**
            filters:
              - name: CircuitBreaker
              args:
                name: userCircuitBreaker
                fallbackUri: forward:/fallback/users

          - id: product-service
            uri: http://product-service:5001
            predicates:
              - Path=/products/**
            filters:
              - name: CircuitBreaker
              args:
                name: productsCircuitBreaker
                fallbackUri: forward:/fallback/products

          - id: entrega-service
            uri: http://entrega-service:3002
            predicates:
              - Path=/entrega/**
            filters:
              - name: CircuitBreaker
              args:
                name: entregaCircuitBreaker
                fallbackUri: forward:/fallback/entrega
  #add o timeLimiter
  resilience4j:
    circuitbreaker:
      instances:
        userCircuitBreaker:
          slidingWindowSize: 10
          minimumNumberOfCalls: 5
          failureRateThreshold: 50
          waitDurationInOpenState: 10s
        productCircuitBreaker:
          slidingWindowSize: 10
          minimumNumberOfCalls: 5
          failureRateThreshold: 50
          waitDurationInOpenState: 10s
        entregaCircuitBreaker:
          slidingWindowSize: 10
          minimumNumberOfCalls: 5
          failureRateThreshold: 50
          waitDurationInOpenState: 10s
    timelimiter:
      instances:
        userCircuitBreaker:
          timeoutDuration: 2s
        productCircuitBreaker:
          timeoutDuration: 2s
        entregaCircuitBreaker:
          timeoutDuration: 2s

  # Evite problemas com circular redirect:
  server:
    port: 8080
